#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(str(Path(__file__).parent))

from config.settings import config_manager
from monitoring.notifications import (
    notification_manager, alert_manager,
    TelegramNotificationChannel, NotificationLevel
)
from telethon import TelegramClient

async def test_telegram_notifications():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = config_manager.load_config()
        
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        print(f"   - Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if config.notifications.enable_telegram_notifications else '‚ùå'}")
        print(f"   - Admin ID: {config.notifications.admin_telegram_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"   - –£—Ä–æ–≤–µ–Ω—å: {config.notifications.notification_level}")
        print(f"   - Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if config.notifications.enable_webhook_notifications else '‚ùå'}")
        print(f"   - Webhook URL: {config.notifications.webhook_url or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not config.notifications.enable_telegram_notifications:
            print("‚ùå Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ENABLE_TELEGRAM_NOTIFICATIONS=true")
            return False
        
        if not config.notifications.admin_telegram_id:
            print("‚ùå ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ADMIN_TELEGRAM_ID=–≤–∞—à_telegram_id")
            return False
        
        # –°–æ–∑–¥–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üì± –°–æ–∑–¥–∞–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
        
        notification_client = TelegramClient(
            "test_notification_session",
            config.telegram.api_id,
            config.telegram.api_hash
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await notification_client.start(phone=config.telegram.phone)
        print("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        telegram_channel = TelegramNotificationChannel(
            client=notification_client,
            admin_chat_id=config.notifications.admin_telegram_id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
        notification_manager.add_channel(telegram_channel)
        print(f"‚úÖ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è admin: {config.notifications.admin_telegram_id}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã
        alert_manager.add_default_rules()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await notification_manager.send_info(
            "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            rate_limit_key="test_info",
            rate_limit_seconds=0  # –û—Ç–∫–ª—é—á–∞–µ–º rate limit –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        )
        print(f"   ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ: {'‚úÖ' if success else '‚ùå'}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        success = await notification_manager.send_warning(
            "–¢–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            rate_limit_key="test_warning",
            rate_limit_seconds=0
        )
        print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {'‚úÖ' if success else '‚ùå'}")
        
        # –û—à–∏–±–∫–∞
        success = await notification_manager.send_error(
            "–¢–µ—Å—Ç –æ—à–∏–±–∫–∏",
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            rate_limit_key="test_error",
            rate_limit_seconds=0
        )
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {'‚úÖ' if success else '‚ùå'}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await notification_manager.send_critical(
            "–¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            rate_limit_key="test_critical",
            rate_limit_seconds=0
        )
        print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ: {'‚úÖ' if success else '‚ùå'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã
        print("\nüö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        test_metrics = {
            'success_rate': 75.0,  # –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
            'total_flood_waits': 5,
            'last_activity': None
        }
        
        await alert_manager.check_alerts(test_metrics)
        print("   ‚úÖ –ê–ª–µ—Ä—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        history = notification_manager.get_notification_history(10)
        print(f"\nüìä –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(history)} –∑–∞–ø–∏—Å–µ–π")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await notification_client.disconnect()
        print("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram - –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ 4 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def test_webhook_notifications():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    try:
        config = config_manager.load_config()
        
        if not config.notifications.enable_webhook_notifications:
            print("‚ùå Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
        
        if not config.notifications.webhook_url or config.notifications.webhook_url == "https://your-webhook-url.com":
            print("‚ùå WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        from monitoring.notifications import WebhookNotificationChannel
        
        webhook_channel = WebhookNotificationChannel(config.notifications.webhook_url)
        notification_manager.add_channel(webhook_channel)
        
        success = await notification_manager.send_info(
            "–¢–µ—Å—Ç Webhook",
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Webhook",
            rate_limit_key="test_webhook",
            rate_limit_seconds=0
        )
        
        print(f"   üåê Webhook: {'‚úÖ' if success else '‚ùå'}")
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Webhook: {e}")
        return False

def show_configuration_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    print("\nüìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    print("=" * 50)
    print("–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
    print("   ENABLE_TELEGRAM_NOTIFICATIONS=true")
    print("   ADMIN_TELEGRAM_ID=123456789")
    print("   NOTIFICATION_LEVEL=INFO")
    print()
    print("–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
    print("   ENABLE_WEBHOOK_NOTIFICATIONS=true")
    print("   WEBHOOK_URL=https://your-webhook-url.com")
    print()
    print("–£—Ä–æ–≤–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: DEBUG, INFO, WARNING, ERROR, CRITICAL")

async def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 50)
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")
    print("4. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
    
    if choice == "1":
        await test_telegram_notifications()
    elif choice == "2":
        await test_webhook_notifications()
    elif choice == "3":
        show_configuration_help()
    elif choice == "4":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    asyncio.run(main())
