#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ç–∏—Ö–∏–π —á–∞—Å –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
"""
import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime, time
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from config.settings import config_manager, AppConfig
from core.broadcaster import EnhancedBroadcaster
from utils.logger import get_logger

load_dotenv()

class NightTestRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.config: AppConfig = None
        self.logger = None
        self.broadcasters = []
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üåô –ù–ê–°–¢–†–û–ô–ö–ê –ù–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = config_manager.load_config()
        self.logger = get_logger("night_test", self.config.logging)
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.config.message_delay = 0.5  # –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        self.config.max_retries = 1      # –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
        self.config.flood_wait_delay = 10  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        print(f"‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}")
        print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã: {len(self.config.targets)}")
        print(f"üí¨ B2B —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.config.b2b_messages)}")
        print(f"üí¨ B2C —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.config.b2c_messages)}")
        print(f"üí¨ AAA —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.config.aaa_messages)}")
        print(f"üí¨ GUS —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.config.gus_messages)}")
        
    async def create_test_broadcasters(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–æ–≤"""
        print("\nüöÄ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ë–†–û–£–î–ö–ê–°–¢–ï–†–û–í")
        print("=" * 40)
        
        # B2B Broadcaster
        b2b_broadcaster = EnhancedBroadcaster(
            config=self.config,
            name="NIGHT_TEST_B2B",
            targets=self.config.targets,
            messages=self.config.b2b_messages[:3],  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
            session_name="sessions/acc1"
        )
        self.broadcasters.append(b2b_broadcaster)
        print("‚úÖ B2B —Ç–µ—Å—Ç–æ–≤—ã–π –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # B2C Broadcaster
        b2c_broadcaster = EnhancedBroadcaster(
            config=self.config,
            name="NIGHT_TEST_B2C",
            targets=self.config.targets,
            messages=self.config.b2c_messages[:3],  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
            session_name="sessions/acc2"
        )
        self.broadcasters.append(b2c_broadcaster)
        print("‚úÖ B2C —Ç–µ—Å—Ç–æ–≤—ã–π –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # AAA Broadcaster
        aaa_broadcaster = EnhancedBroadcaster(
            config=self.config,
            name="NIGHT_TEST_AAA",
            targets=self.config.targets,
            messages=self.config.aaa_messages[:2],  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
            session_name="sessions/acc1"
        )
        self.broadcasters.append(aaa_broadcaster)
        print("‚úÖ AAA —Ç–µ—Å—Ç–æ–≤—ã–π –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # GUS Broadcaster
        gus_broadcaster = EnhancedBroadcaster(
            config=self.config,
            name="NIGHT_TEST_GUS",
            targets=self.config.targets,
            messages=self.config.gus_messages[:2],  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
            session_name="sessions/acc2"
        )
        self.broadcasters.append(gus_broadcaster)
        print("‚úÖ GUS —Ç–µ—Å—Ç–æ–≤—ã–π –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        print(f"\nüìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–æ–≤: {len(self.broadcasters)}")
        
    async def run_single_broadcaster_test(self, broadcaster_name: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–∞"""
        print(f"\nüî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {broadcaster_name}")
        print("=" * 40)
        
        broadcaster = None
        for b in self.broadcasters:
            if b.name == broadcaster_name:
                broadcaster = b
                break
        
        if not broadcaster:
            print(f"‚ùå –ë—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä {broadcaster_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            print(f"üì± –ó–∞–ø—É—Å–∫ {broadcaster_name}...")
            await broadcaster.start()
            
            print(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(broadcaster.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
            await broadcaster.send_messages()
            
            print(f"‚úÖ {broadcaster_name} —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {broadcaster_name}: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ {broadcaster_name}: {e}")
        finally:
            await broadcaster.stop()
            print(f"üõë {broadcaster_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def run_all_broadcasters_test(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–æ–≤"""
        print("\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ë–†–û–£–î–ö–ê–°–¢–ï–†–û–í")
        print("=" * 50)
        
        for broadcaster in self.broadcasters:
            try:
                print(f"\nüì± –ó–∞–ø—É—Å–∫ {broadcaster.name}...")
                await broadcaster.start()
                
                print(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(broadcaster.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                await broadcaster.send_messages()
                
                print(f"‚úÖ {broadcaster.name} –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {broadcaster.name}: {e}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ {broadcaster.name}: {e}")
            finally:
                await broadcaster.stop()
                print(f"üõë {broadcaster.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–∞–º–∏
            await asyncio.sleep(2)
    
    async def run_parallel_test(self):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–æ–≤"""
        print("\n‚ö° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        print("=" * 40)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = []
            for broadcaster in self.broadcasters:
                task = asyncio.create_task(self._run_broadcaster_task(broadcaster))
                tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = 0
            failed = 0
            
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    print(f"‚ùå {self.broadcasters[i].name}: {result}")
                    failed += 1
                else:
                    print(f"‚úÖ {self.broadcasters[i].name}: –£—Å–ø–µ—à–Ω–æ")
                    successful += 1
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} —Å –æ—à–∏–±–∫–∞–º–∏")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    async def _run_broadcaster_task(self, broadcaster):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–∞"""
        try:
            await broadcaster.start()
            await broadcaster.send_messages()
            return True
        except Exception as e:
            raise e
        finally:
            await broadcaster.stop()
    
    async def run_stress_test(self, duration_minutes: int = 5):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        print(f"\nüí™ –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ({duration_minutes} –º–∏–Ω—É—Ç)")
        print("=" * 50)
        
        end_time = datetime.now().timestamp() + (duration_minutes * 60)
        iteration = 0
        
        while datetime.now().timestamp() < end_time:
            iteration += 1
            print(f"\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}")
            
            try:
                await self.run_all_broadcasters_test()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(30)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}: {e}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}: {e}")
        
        print(f"\n‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã–ø–æ–ª–Ω–µ–Ω–æ {iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π")
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüåô –ú–ï–ù–Æ –ù–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 40)
        print("1. üß™ –¢–µ—Å—Ç B2B –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–∞")
        print("2. üß™ –¢–µ—Å—Ç B2C –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–∞")
        print("3. üß™ –¢–µ—Å—Ç AAA –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–∞")
        print("4. üß™ –¢–µ—Å—Ç GUS –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–∞")
        print("5. üöÄ –¢–µ—Å—Ç –≤—Å–µ—Ö –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)")
        print("6. ‚ö° –¢–µ—Å—Ç –≤—Å–µ—Ö –±—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–æ–≤ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)")
        print("7. üí™ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("8. üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print("=" * 40)
    
    async def show_system_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        print("\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
        print("=" * 30)
        print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üåô –†–µ–∂–∏–º: –ù–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤: {len(self.config.targets)}")
        print(f"üì± –ë—Ä–æ—É–¥–∫–∞—Å—Ç–µ—Ä–æ–≤: {len(self.broadcasters)}")
        
        for broadcaster in self.broadcasters:
            print(f"  - {broadcaster.name}: {len(broadcaster.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print(f"‚öôÔ∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {self.config.message_delay}—Å")
        print(f"üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {self.config.max_retries}")
        print(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ FloodWait: {self.config.flood_wait_delay}—Å")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = NightTestRunner()
    
    try:
        await runner.setup()
        await runner.create_test_broadcasters()
        
        while True:
            runner.show_menu()
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç (0-8): ").strip()
            
            if choice == "0":
                print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                break
            elif choice == "1":
                await runner.run_single_broadcaster_test("NIGHT_TEST_B2B")
            elif choice == "2":
                await runner.run_single_broadcaster_test("NIGHT_TEST_B2C")
            elif choice == "3":
                await runner.run_single_broadcaster_test("NIGHT_TEST_AAA")
            elif choice == "4":
                await runner.run_single_broadcaster_test("NIGHT_TEST_GUS")
            elif choice == "5":
                await runner.run_all_broadcasters_test()
            elif choice == "6":
                await runner.run_parallel_test()
            elif choice == "7":
                duration = input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ").strip()
                duration = int(duration) if duration.isdigit() else 5
                await runner.run_stress_test(duration)
            elif choice == "8":
                await runner.show_system_info()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    print("üåô –ù–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SENDMESSAGEBOT")
    print("=" * 50)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è")
    print("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ç–∏—Ö–∏–π —á–∞—Å –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    print("=" * 50)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
