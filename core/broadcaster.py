"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å Broadcaster —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""
import asyncio
import signal
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
from dataclasses import dataclass
import pytz
from telethon import TelegramClient
from telethon.errors import FloodWaitError, RPCError, ChatWriteForbiddenError
from telethon.network.connection.tcpmtproxy import ConnectionTcpMTProxyIntermediate

from config.settings import TelegramConfig, BroadcastingConfig, AppConfig
from utils.logger import get_logger
from core.exceptions import BroadcastingError, ConfigurationError
from core.retry import retry_with_backoff
from monitoring.metrics import MetricsCollector, MessageMetric, BroadcastCycleMetric

@dataclass
class MessageStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    total_sent: int = 0
    total_failed: int = 0
    flood_waits: int = 0
    last_sent_time: Optional[datetime] = None
    errors: Dict[str, int] = None
    
    def __post_init__(self):
        if self.errors is None:
            self.errors = {}

@dataclass
class DeferredMessage:
    """–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª"""
    chat_id: int
    message: str
    message_idx: int
    created_at: datetime
    attempts: int = 0
    max_attempts: int = 3

class EnhancedBroadcaster:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, config: AppConfig, name: str, targets: List[int], messages: List[str], session_name: Optional[str] = None):
        self.config = config
        self.name = name
        self.targets = targets
        self.messages = messages
        self.session_name = session_name or config.telegram.session_name
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = MessageStats()
        self.metrics = MetricsCollector()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self._running = False
        self._client: Optional[TelegramClient] = None
        self._task: Optional[asyncio.Task] = None
        self._cycle_start_time: Optional[datetime] = None
        
        # üïê Rate limiting: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç
        # –§–æ—Ä–º–∞—Ç: {chat_id: datetime –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏}
        self._last_send_times: Dict[int, datetime] = {}
        
        # üì¨ –û—á–µ—Ä–µ–¥—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª)
        self._deferred_messages: List[DeferredMessage] = []
        
        # –õ–æ–≥–≥–µ—Ä
        self.logger = get_logger(f"broadcaster.{name}", config.logging)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        self._init_client()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        self._setup_signal_handlers()
    
    def _init_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            telegram_config = self.config.telegram
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π
            from pathlib import Path
            session_path = Path(self.session_name)
            session_dir = session_path.parent
            
            if session_dir and str(session_dir) != '.':
                session_dir.mkdir(parents=True, exist_ok=True)
                self.logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–π: {session_dir}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
            session_file = Path(f"{self.session_name}.session")
            if not session_file.exists():
                self.logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.logger.warning(f"–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            else:
                self.logger.info(f"‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–∞–π–¥–µ–Ω: {session_file}")
            
            if telegram_config.proxy and telegram_config.proxy.enabled:
                if telegram_config.proxy.protocol == "mtproto":
                    self._client = TelegramClient(
                        self.session_name,
                        telegram_config.api_id,
                        telegram_config.api_hash,
                        connection=ConnectionTcpMTProxyIntermediate,
                        proxy=(
                            telegram_config.proxy.addr,
                            telegram_config.proxy.port,
                            telegram_config.proxy.secret
                        ),
                    )
                else:
                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–∫—Å–∏
                    self._client = TelegramClient(
                        self.session_name,
                        telegram_config.api_id,
                        telegram_config.api_hash,
                        proxy=telegram_config.proxy
                    )
            else:
                self._client = TelegramClient(
                    self.session_name,
                    telegram_config.api_id,
                    telegram_config.api_hash
                )
                
            self.logger.info(f"–ö–ª–∏–µ–Ω—Ç {self.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Å—Å–∏–µ–π {self.session_name}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {self.name}: {e}")
            self.logger.error(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            self.logger.error(f"  1. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏")
            self.logger.error(f"  2. –ï—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
            self.logger.error(f"  3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏: {self.session_name}")
            raise BroadcastingError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç: {e}")
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            asyncio.create_task(self.stop())
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    @retry_with_backoff(max_retries=3, base_delay=1)
    async def _send_single_message(self, target: int, message: str, message_idx: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π"""
        start_time = datetime.now()
        response_time = 0.0
        flood_wait_duration = 0
        error_type = None
        success = False

        try:
            await self._client.send_message(target, message)
            self.stats.total_sent += 1
            self.stats.last_sent_time = datetime.now()
            success = True
            response_time = (datetime.now() - start_time).total_seconds()
            
            self.logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{message_idx} –≤ {target} "
                f"(–≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats.total_sent})"
            )

            
        except FloodWaitError as e:
            self.stats.flood_waits += 1
            wait_time = e.seconds
            flood_wait_duration = wait_time
            error_type = "FloodWaitError"
            
            self.logger.warning(
                f"FloodWait: –∂–¥—ë–º {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è {target}. "
                f"–í—Å–µ–≥–æ FloodWait: {self.stats.flood_waits}"
            )
            
            await asyncio.sleep(wait_time)
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
            return await self._send_single_message(target, message, message_idx)
            
        except ChatWriteForbiddenError as e:
            self.stats.total_failed += 1
            self.stats.errors["ChatWriteForbidden"] = self.stats.errors.get("ChatWriteForbidden", 0) + 1
            error_type = "ChatWriteForbiddenError"
            self.logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —á–∞—Ç {target}")

            
        except RPCError as e:
            self.stats.total_failed += 1
            error_type = f"RPCError_{e.code}"
            self.stats.errors[error_type] = self.stats.errors.get(error_type, 0) + 1
            self.logger.error(f"RPC –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {target}: {e}")
            
        except Exception as e:
            self.stats.total_failed += 1
            error_type = type(e).__name__
            self.stats.errors[error_type] = self.stats.errors.get(error_type, 0) + 1
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {target}: {e}")

        finally:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
            metric = MessageMetric(
                timestamp=start_time,
                chat_id=target,
                message_id=message_idx,
                success=success,
                error_type=error_type,
                response_time=response_time,
                flood_wait_duration=flood_wait_duration
            )
            self.metrics.record_message(metric)

        return success
    
    async def _send_messages_cycle(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        cycle_start = datetime.now()
        self._cycle_start_time = cycle_start

        self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {self.name}")

        # üì¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ü–∏–∫–ª–∞
        if self._deferred_messages:
            self.logger.info(f"üì¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(self._deferred_messages)} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            deferred_to_retry = []
            
            for deferred_msg in self._deferred_messages:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                can_send, wait_time = self._can_send_to_chat(
                    deferred_msg.chat_id, 
                    min_interval_seconds=self.config.broadcasting.min_interval_per_chat
                )
                
                if can_send:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                    deferred_msg.attempts += 1
                    success = await self._send_single_message(
                        deferred_msg.chat_id, 
                        deferred_msg.message, 
                        deferred_msg.message_idx
                    )
                    
                    if success:
                        self._update_chat_send_time(deferred_msg.chat_id)
                        self.logger.info(
                            f"‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {deferred_msg.chat_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ "
                            f"(–ø–æ–ø—ã—Ç–∫–∞ {deferred_msg.attempts}/{deferred_msg.max_attempts})"
                        )
                    elif deferred_msg.attempts < deferred_msg.max_attempts:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                        deferred_to_retry.append(deferred_msg)
                        self.logger.warning(
                            f"‚ö†Ô∏è –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {deferred_msg.chat_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. "
                            f"–û—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ –ø–æ–ø—ã—Ç–∫—É {deferred_msg.attempts}/{deferred_msg.max_attempts}"
                        )
                    else:
                        self.logger.error(
                            f"‚ùå –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {deferred_msg.chat_id} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "
                            f"–ø–æ—Å–ª–µ {deferred_msg.max_attempts} –ø–æ–ø—ã—Ç–æ–∫. –£–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏."
                        )
                else:
                    # –ï—â—ë —Ä–∞–Ω–æ - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏
                    deferred_to_retry.append(deferred_msg)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö
            self._deferred_messages = deferred_to_retry
            
            if deferred_to_retry:
                self.logger.info(f"üì¨ –í –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(deferred_to_retry)} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        total_messages = len(self.messages) * len(self.targets)
        successful_messages = 0
        failed_messages = 0
        flood_waits_count = 0
        
        for idx, message in enumerate(self.messages, start=1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ —Ç–∏—Ö–∏–π —á–∞—Å –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏
            if self._is_quiet_hour():
                self.logger.info(f"üåô –ù–∞—Å—Ç—É–ø–∏–ª —Ç–∏—Ö–∏–π —á–∞—Å –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª.")
                break
            
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{idx} –∏–∑ {len(self.messages)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã
            for target in self.targets:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–π —á–∞—Å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                if self._is_quiet_hour():
                    self.logger.info(f"üåô –ù–∞—Å—Ç—É–ø–∏–ª —Ç–∏—Ö–∏–π —á–∞—Å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.")
                    break
                
                # üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–¥–∏–Ω —á–∞—Ç —á–∞—â–µ —á–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                min_interval = self.config.broadcasting.min_interval_per_chat
                can_send, wait_time = self._can_send_to_chat(target, min_interval_seconds=min_interval)
                if not can_send:
                    self.logger.info(
                        f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç {target}: –ø—Ä–æ—à–ª–æ —Ç–æ–ª—å–∫–æ {min_interval - wait_time:.1f} —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏. "
                        f"–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â—ë {wait_time:.1f} —Å–µ–∫. (–ò–Ω—Ç–µ—Ä–≤–∞–ª: {min_interval} —Å–µ–∫)"
                    )
                    # üì¨ –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
                    self._defer_message(target, message, idx)
                    continue
                
                success = await self._send_single_message(target, message, idx)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                if success:
                    self._update_chat_send_time(target)
                    successful_messages += 1
                else:
                    failed_messages += 1
                
                # üïê –ó–ê–î–ï–†–ñ–ö–ê –ú–ï–ñ–î–£ –ß–ê–¢–ê–ú–ò - –∑–¥–µ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã–µ —á–∞—Ç—ã
                # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑: config.broadcasting.delay_between_chats (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 —Å–µ–∫)
                if self.config.broadcasting.delay_between_chats > 0:
                    await asyncio.sleep(self.config.broadcasting.delay_between_chats)



        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —Ü–∏–∫–ª–∞
        cycle_end = datetime.now()
        cycle_duration = (cycle_end - cycle_start).total_seconds()

        cycle_metric = BroadcastCycleMetric(
            start_time=cycle_start,
            end_time=cycle_end,
            total_messages=total_messages,
            successful_messages=successful_messages,
            failed_messages=failed_messages,
            total_duration=cycle_duration,
            flood_waits_count=flood_waits_count
        )
        self.metrics.record_cycle(cycle_metric)

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._log_stats()
    
    def _log_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.logger.info(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {self.name}: "
            f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats.total_sent}, "
            f"–æ—à–∏–±–æ–∫: {self.stats.total_failed}, "
            f"FloodWait: {self.stats.flood_waits}, "
            f"–æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö: {len(self._deferred_messages)}"
        )
        
        if self.stats.errors:
            self.logger.info(f"–¢–∏–ø—ã –æ—à–∏–±–æ–∫: {dict(self.stats.errors)}")
    
    def _wait_until_start_time(self) -> float:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.config.broadcasting.enable_scheduling:
            return 0
        
        moscow_tz = pytz.timezone("Europe/Moscow")
        now = datetime.now(moscow_tz)
        start_time = now.replace(
            hour=self.config.broadcasting.start_time_hour,
            minute=0,
            second=0,
            microsecond=0
        )
        
        if now.hour < self.config.broadcasting.start_time_hour:
            seconds_to_wait = (start_time - now).total_seconds()
            self.logger.info(
                f"–°–µ–π—á–∞—Å {now.strftime('%H:%M')}, "
                f"–∂–¥—ë–º –¥–æ {start_time.strftime('%H:%M')} "
                f"({seconds_to_wait/60:.1f} –º–∏–Ω.)"
            )
            return seconds_to_wait
        
        return 0
    
    def _is_quiet_hour(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ç–∏—Ö–æ–º —á–∞—Å–µ"""
        if not self.config.broadcasting.enable_quiet_hours:
            return False
        
        moscow_tz = pytz.timezone("Europe/Moscow")
        now = datetime.now(moscow_tz)
        current_hour = now.hour
        
        quiet_start = self.config.broadcasting.quiet_hour_start
        quiet_end = self.config.broadcasting.quiet_hour_end
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç–∏—Ö–æ–≥–æ —á–∞—Å–∞
        return quiet_start <= current_hour < quiet_end
    
    def _can_send_to_chat(self, chat_id: int, min_interval_seconds: int = 120) -> tuple[bool, float]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ N —Å–µ–∫—É–Ω–¥)
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            min_interval_seconds: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 120 = 2 –º–∏–Ω—É—Ç—ã)
        
        Returns:
            tuple[bool, float]: (–º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å)
        """
        now = datetime.now()
        
        # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ä–∞–∑—É
        if chat_id not in self._last_send_times:
            return True, 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        last_send_time = self._last_send_times[chat_id]
        time_since_last = (now - last_send_time).total_seconds()
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if time_since_last >= min_interval_seconds:
            return True, 0
        
        # –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
        wait_time = min_interval_seconds - time_since_last
        return False, wait_time
    
    def _update_chat_send_time(self, chat_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç"""
        self._last_send_times[chat_id] = datetime.now()
    
    def _defer_message(self, chat_id: int, message: str, message_idx: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ"""
        deferred = DeferredMessage(
            chat_id=chat_id,
            message=message,
            message_idx=message_idx,
            created_at=datetime.now(),
            attempts=0,
            max_attempts=3
        )
        self._deferred_messages.append(deferred)
        self.logger.info(
            f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—Ç–ª–æ–∂–µ–Ω–æ. –í—Å–µ–≥–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö: {len(self._deferred_messages)}"
        )
    
    def _wait_until_quiet_hour_ends(self) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∏—Ö–æ–≥–æ —á–∞—Å–∞"""
        if not self._is_quiet_hour():
            return 0
        
        moscow_tz = pytz.timezone("Europe/Moscow")
        now = datetime.now(moscow_tz)
        end_time = now.replace(
            hour=self.config.broadcasting.quiet_hour_end,
            minute=0,
            second=0,
            microsecond=0
        )
        
        seconds_to_wait = (end_time - now).total_seconds()
        self.logger.info(
            f"üåô –¢–∏—Ö–∏–π —á–∞—Å (—Å {self.config.broadcasting.quiet_hour_start:02d}:00 –¥–æ {self.config.broadcasting.quiet_hour_end:02d}:00). "
            f"–°–µ–π—á–∞—Å {now.strftime('%H:%M')}, –∂–¥—ë–º –¥–æ {end_time.strftime('%H:%M')} "
            f"({seconds_to_wait/60:.1f} –º–∏–Ω.)"
        )
        
        return seconds_to_wait
    
    @retry_with_backoff(max_retries=3, base_delay=5)
    async def _ensure_connection(self):
        """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        if not self._client or not self._client.is_connected():
            self.logger.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram –¥–ª—è {self.name}...")
            await self._client.start()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await self._client.get_me()
            account_id = me.id
            account_name = f"{me.first_name or ''} {me.last_name or ''}".strip()
            username = me.username or "–±–µ–∑ username"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ broadcaster'–∞
            account_type = "–û–ü–¢–û–í–´–ô" if "B2B" in self.name or "AAA" in self.name else "–†–û–ó–ù–ò–ß–ù–´–ô"
            
            self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–∫ {account_name} (@{username})")
            self.logger.info(f"üì± ID –∞–∫–∫–∞—É–Ω—Ç–∞: {account_id}")
            self.logger.info(f"üè∑Ô∏è  –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
            self.logger.info(f"üìä Broadcaster: {self.name}")
            self.logger.info(f"üéØ –¶–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤: {len(self.targets)}")
            self.logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(self.messages)}")
            
            print(f"‚úÖ {self.name} –ø–æ–¥–∫–ª—é—á–µ–Ω: {account_name} (@{username})")
            print(f"üì± ID: {account_id} | –¢–∏–ø: {account_type}")
            print(f"üéØ –ß–∞—Ç–æ–≤: {len(self.targets)} | üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(self.messages)}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ broadcaster"""
        if self._running:
            self.logger.warning(f"Broadcaster {self.name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self._running = True
        self.logger.info(f"–ó–∞–ø—É—Å–∫ broadcaster {self.name}")
        
        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            wait_time = self._wait_until_start_time()
            if wait_time > 0:
                await asyncio.sleep(wait_time)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self._running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ö–æ–≥–æ —á–∞—Å–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ü–∏–∫–ª–∞
                    quiet_wait_time = self._wait_until_quiet_hour_ends()
                    if quiet_wait_time > 0:
                        await asyncio.sleep(quiet_wait_time)
                        continue  # –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∏—Ö–æ–≥–æ —á–∞—Å–∞ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
                    
                    await self._ensure_connection()
                    await self._send_messages_cycle()
                    
                    self.logger.info(
                        f"–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –ñ–¥—ë–º {self.config.broadcasting.cycle_delay} —Å–µ–∫—É–Ω–¥..."
                    )
                    await asyncio.sleep(self.config.broadcasting.cycle_delay)
                    
                except Exception as e:
                    self.logger.exception(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
                    await asyncio.sleep(self.config.broadcasting.retry_delay)
                    
        except asyncio.CancelledError:
            self.logger.info(f"Broadcaster {self.name} –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            self.logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ broadcaster {self.name}: {e}")
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ broadcaster"""
        if not self._running:
            return
        
        self.logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ broadcaster {self.name}")
        self._running = False
        
        if self._task and not self._task.done():
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        
        if self._client and self._client.is_connected():
            await self._client.disconnect()
            self.logger.info(f"Broadcaster {self.name} –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._log_stats()
    
    def run(self) -> asyncio.Task:
        """–ó–∞–ø—É—Å–∫ broadcaster –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        if self._task and not self._task.done():
            self.logger.warning(f"Broadcaster {self.name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return self._task
        
        self._task = asyncio.create_task(self.start())
        return self._task
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            "name": self.name,
            "running": self._running,
            "total_sent": self.stats.total_sent,
            "total_failed": self.stats.total_failed,
            "flood_waits": self.stats.flood_waits,
            "last_sent_time": self.stats.last_sent_time.isoformat() if self.stats.last_sent_time else None,
            "errors": dict(self.stats.errors),
            "targets_count": len(self.targets),
            "messages_count": len(self.messages)
        }

    def get_detailed_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        basic_stats = self.get_stats()
        metrics_summary = self.metrics.get_summary_stats()

        return {
            "basic": basic_stats,
            "metrics": metrics_summary,
            "performance": {
                "avg_response_time": self.metrics.stats.get('avg_response_time', 0),
                "success_rate": self.metrics.stats.get('success_rate', 0),
                "cycles_completed": self.metrics.stats.get('total_cycles_completed', 0),
                "last_activity": self.metrics.stats.get('last_activity')
            }
        }

    def print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        stats = self.get_detailed_stats()

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {self.name}")
        print("=" * 50)

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        basic = stats["basic"]
        print(f"üéØ –¶–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤: {basic['targets_count']}")
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {basic['messages_count']}")
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {basic['total_sent']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {basic['total_failed']}")
        print(f"‚è≥ FloodWait: {basic['flood_waits']}")

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        perf = stats["performance"]
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {perf['success_rate']:.1f}%")
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {perf['avg_response_time']:.2f}—Å")
        print(f"üîÑ –¶–∏–∫–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {perf['cycles_completed']}")

        # –û—à–∏–±–∫–∏
        if basic['errors']:
            print(f"üö® –¢–∏–ø—ã –æ—à–∏–±–æ–∫:")
            for error_type, count in basic['errors'].items():
                print(f"   - {error_type}: {count}")

        print("=" * 50)

