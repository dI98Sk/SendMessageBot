"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
"""
import os
import sys
from pathlib import Path
from datetime import datetime
import json

def print_header(text):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "=" * 70)
    print(f"  {text}")
    print("=" * 70)

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print_header("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python")
    print(f"–í–µ—Ä—Å–∏—è Python: {sys.version}")
    print(f"–ü—É—Ç—å –∫ Python: {sys.executable}")
    
    version_info = sys.version_info
    if version_info.major >= 3 and version_info.minor >= 8:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.8+)")
        return True
    else:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_header("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    required_vars = ["API_ID", "API_HASH"]
    optional_vars = [
        "SESSION_NAME",
        "SHEET_URL_B2B", 
        "SHEET_URL_B2C",
        "GOOGLE_CREDENTIALS_FILE",
        "ADMIN_TELEGRAM_ID"
    ]
    
    all_ok = True
    
    print("\nüìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var in required_vars:
        value = os.getenv(var)
        if value:
            masked = value[:4] + "..." if len(value) > 4 else "***"
            print(f"  ‚úÖ {var}: {masked}")
        else:
            print(f"  ‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            all_ok = False
    
    print("\nüìã –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            if "URL" in var:
                masked = value[:30] + "..." if len(value) > 30 else value
            else:
                masked = value[:20] + "..." if len(value) > 20 else value
            print(f"  ‚úÖ {var}: {masked}")
        else:
            print(f"  ‚ö†Ô∏è  {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    return all_ok

def check_sessions_directory():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Å–µ—Å—Å–∏—è–º–∏"""
    print_header("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ sessions/")
    
    sessions_dir = Path("sessions")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not sessions_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {sessions_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print(f"   –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é...")
        try:
            sessions_dir.mkdir(parents=True, exist_ok=True)
            print(f"   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
            return False
    else:
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {sessions_dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
    test_file = sessions_dir / ".test_write"
    try:
        test_file.write_text("test")
        test_file.unlink()
        print(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å—Ç—å")
    except Exception as e:
        print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π
    session_files = list(sessions_dir.glob("*.session"))
    if session_files:
        print(f"\nüìù –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π: {len(session_files)}")
        for session_file in session_files:
            size = session_file.stat().st_size
            print(f"  - {session_file.name}: {size} –±–∞–π—Ç")
    else:
        print(f"‚ö†Ô∏è  –§–∞–π–ª—ã —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print(f"   –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    
    return True

def check_credentials_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ credentials.json"""
    print_header("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ credentials.json")
    
    creds_file = Path("credentials.json")
    
    if not creds_file.exists():
        print(f"‚ùå –§–∞–π–ª {creds_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"   –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {creds_file.absolute()}")
        print(f"\nüí° –ß—Ç–æ –¥–µ–ª–∞—Ç—å:")
        print(f"   1. –°–∫–∞—á–∞–π—Ç–µ credentials.json –∏–∑ Google Cloud Console")
        print(f"   2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {Path.cwd()}")
        print(f"   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'credentials.json'")
        return False
    
    print(f"‚úÖ –§–∞–π–ª {creds_file} –Ω–∞–π–¥–µ–Ω")
    print(f"   –ü—É—Ç—å: {creds_file.absolute()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    size = creds_file.stat().st_size
    print(f"   –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
    
    if size == 0:
        print(f"‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π!")
        return False
    
    if size < 100:
        print(f"‚ö†Ô∏è  –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
    try:
        with open(creds_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
        required_fields = ['type', 'project_id', 'private_key', 'client_email']
        missing_fields = [f for f in required_fields if f not in data]
        
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            return False
        
        print(f"‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω")
        print(f"   Type: {data.get('type')}")
        print(f"   Project ID: {data.get('project_id')}")
        print(f"   Client Email: {data.get('client_email')}")
        
        if data.get('type') != 'service_account':
            print(f"‚ö†Ô∏è  –¢–∏–ø –Ω–µ 'service_account', –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def check_config_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print_header("‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    config_dir = Path("config")
    if not config_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {config_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    
    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {config_dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    required_files = [
        "messages.py",
        "targets.py",
        "settings.py"
    ]
    
    all_ok = True
    for filename in required_files:
        file_path = config_dir / filename
        if file_path.exists():
            size = file_path.stat().st_size
            print(f"  ‚úÖ {filename}: {size} –±–∞–π—Ç")
        else:
            print(f"  ‚ùå {filename}: –ù–ï –ù–ê–ô–î–ï–ù")
            all_ok = False
    
    return all_ok

def check_system_time():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    print_header("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    now = datetime.now()
    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã: {now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"UTC –≤—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ/–Ω–æ–≤–æ–µ
    year = now.year
    if year < 2024 or year > 2030:
        print(f"‚ö†Ô∏è  –í—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print(f"   –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å JWT –ø–æ–¥–ø–∏—Å—å—é Google Sheets")
        print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        return False
    
    print(f"‚úÖ –í—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_header("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤")
    
    required_packages = [
        "telethon",
        "gspread", 
        "oauth2client",
        "python-dotenv",
        "pytz"
    ]
    
    all_ok = True
    for package in required_packages:
        try:
            __import__(package)
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            all_ok = False
    
    if not all_ok:
        print(f"\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"   pip install -r requirements_improved.txt")
    
    return all_ok

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø SENDMESSAGEBOT üîç".center(70))
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
    print(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {sys.platform}")
    
    checks = [
        ("Python", check_python_version),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment_variables),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è sessions/", check_sessions_directory),
        ("–§–∞–π–ª credentials.json", check_credentials_file),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", check_config_files),
        ("–°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è", check_system_time),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies),
    ]
    
    results = {}
    for name, check_func in checks:
        try:
            results[name] = check_func()
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '{name}': {e}")
            results[name] = False
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print_header("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    
    passed = sum(1 for v in results.values() if v)
    total = len(results)
    
    for name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {name}")
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: python main_improved.py")
        return 0
    else:
        print("\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        if not results.get("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"):
            print("   - –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–∑ ENV_TEMPLATE.md")
        
        if not results.get("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è sessions/"):
            print("   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é sessions/")
        
        if not results.get("–§–∞–π–ª credentials.json"):
            print("   - –°–∫–∞—á–∞–π—Ç–µ credentials.json –∏–∑ Google Cloud Console")
            print("   - –ò–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Google Sheets –≤ .env")
        
        if not results.get("–°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è"):
            print("   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            print("   - –î–ª—è Windows: net start w32time && w32tm /resync")
            print("   - –î–ª—è Linux: sudo ntpdate pool.ntp.org")
        
        if not results.get("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"):
            print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements_improved.txt")
        
        return 1

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

