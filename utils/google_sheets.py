""""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
"""
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from typing import List, Optional, Dict, Any
import logging
from datetime import datetime
import asyncio
from pathlib import Path

logger = logging.getLogger(__name__)

class GoogleSheetsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""

    def __init__(self, credentials_file: str = "credentials.json"):
        self.credentials_file = credentials_file
        self.client: Optional[gspread.Client] = None
        self.last_update = None
        self.cached_messages = {
            'b2b': [],
            'b2c': []
        }

    def _authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets"""
        try:
            credentials_path = Path(self.credentials_file)
            
            if not credentials_path.exists():
                logger.error(f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_file}")
                logger.error(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {credentials_path.absolute()}")
                logger.error(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
                logger.error(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ credentials.json –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = credentials_path.stat().st_size
            if file_size == 0:
                logger.error(f"‚ùå –§–∞–π–ª credentials.json –ø—É—Å—Ç–æ–π")
                return False
            
            logger.info(f"‚úÖ –§–∞–π–ª credentials.json –Ω–∞–π–¥–µ–Ω: {credentials_path.absolute()}")

            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]

            creds = ServiceAccountCredentials.from_json_keyfile_name(
                self.credentials_file, scope
            )
            self.client = gspread.authorize(creds)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets: {e}")
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            error_str = str(e).lower()
            if 'invalid jwt signature' in error_str or 'invalid_grant' in error_str:
                logger.error(f"")
                logger.error(f"üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å JWT –ø–æ–¥–ø–∏—Å—å—é. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                logger.error(f"  1. –í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ: date)")
                logger.error(f"  2. –§–∞–π–ª credentials.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
                logger.error(f"  3. Service Account —É–¥–∞–ª–µ–Ω –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω")
                logger.error(f"  4. –°–∫–∞—á–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª credentials.json –∏–∑ Google Cloud Console")
                logger.error(f"")
            elif 'permission denied' in error_str:
                logger.error(f"")
                logger.error(f"üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞:")
                logger.error(f"  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª credentials.json")
                logger.error(f"  2. Service Account –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ")
                logger.error(f"  3. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ç–∞–±–ª–∏—Ü–µ–π —Å email –∏–∑ credentials.json")
                logger.error(f"")
            
            return False

    def _get_sheet_data(self, sheet_url: str, column: int = 1) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.client:
            if not self._authenticate():
                return []

        try:
            sheet = self.client.open_by_url(sheet_url).sheet1
            values = sheet.col_values(column)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            messages = [msg.strip() for msg in values if msg.strip()]
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Google Sheets")
            return messages

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
            return []

    async def fetch_messages_async(self, b2b_url: str, b2c_url: str) -> Dict[str, List[str]]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        def _fetch():
            b2b_messages = self._get_sheet_data(b2b_url) if b2b_url else []
            b2c_messages = self._get_sheet_data(b2c_url) if b2c_url else []
            return {
                'b2b': b2b_messages,
                'b2c': b2c_messages
            }

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, _fetch)

        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.cached_messages = result
        self.last_update = datetime.now()

        return result

    def get_cached_messages(self) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return self.cached_messages.copy()

    def is_update_needed(self, interval_hours: int = 24) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if not self.last_update:
            return True

        time_since_update = datetime.now() - self.last_update
        return time_since_update.total_seconds() >= (interval_hours * 3600)

    def get_last_update_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        return {
            'last_update': self.last_update.isoformat() if self.last_update else None,
            'cached_b2b_count': len(self.cached_messages['b2b']),
            'cached_b2c_count': len(self.cached_messages['b2c']),
            'update_needed': self.is_update_needed()
        }

class MessageUpdater:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def __init__(self, google_sheets_manager: GoogleSheetsManager):
        self.gs_manager = google_sheets_manager
        self.update_callbacks = []

    def add_update_callback(self, callback):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback'–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.update_callbacks.append(callback)

    async def update_messages_from_sheets(self, b2b_url: str, b2c_url: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Google Sheets"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Google Sheets...")

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_messages = await self.gs_manager.fetch_messages_async(b2b_url, b2c_url)

            if not new_messages['b2b'] and not new_messages['b2c']:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Google Sheets")
                return False

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ callback'–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            for callback in self.update_callbacks:
                try:
                    await callback(new_messages)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: B2B={len(new_messages['b2b'])}, B2C={len(new_messages['b2c'])}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return False

    async def start_periodic_updates(self, b2b_url: str, b2c_url: str, interval_hours: int = 24):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–æ–≤")

        while True:
            try:
                if self.gs_manager.is_update_needed(interval_hours):
                    await self.update_messages_from_sheets(b2b_url, b2c_url)

                # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(3600)

            except asyncio.CancelledError:
                logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
