"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import pytz

from config.settings import LoggingConfig, config_manager
from utils.logger import get_logger
from monitoring.metrics import MetricsCollector

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
config = config_manager.load_config()
logger = get_logger(__name__, config.logging)

@dataclass
class ReportData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    timestamp: datetime
    total_sent: int
    total_failed: int
    total_flood_waits: int
    success_rate: float
    avg_response_time: float
    cycles_completed: int
    active_broadcasters: int
    last_activity: Optional[datetime]
    errors_summary: Dict[str, int]
    top_chats: List[Dict[str, Any]]

class TelegramReporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram"""
    
    def __init__(self, bot_token: str, channel_id: str, timezone: str = "Europe/Moscow"):
        self.bot_token = bot_token
        self.channel_id = channel_id
        self.timezone = pytz.timezone(timezone)
        self.last_report_time: Optional[datetime] = None
        self.report_interval_hours = 3  # –û—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
        self.running = False
        self.task: Optional[asyncio.Task] = None
        self.logger = get_logger("telegram_reporter", config.logging)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
        self.reports_sent = 0
        self.last_report_data: Optional[ReportData] = None
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ broadcaster'–æ–≤
        self.get_broadcasters_func = None
    
    async def _send_telegram_message(self, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            import aiohttp
            
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            data = {
                "chat_id": self.channel_id,
                "text": message,
                "parse_mode": parse_mode,
                "disable_web_page_preview": True
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        self.logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                        return True
                    else:
                        error_text = await response.text()
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status} - {error_text}")
                        return False
                        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram: {e}")
            return False
    
    def _format_report_message(self, report_data: ReportData) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        timestamp = report_data.timestamp.astimezone(self.timezone)
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        if report_data.success_rate >= 95:
            status_emoji = "üü¢"
            status_text = "–û—Ç–ª–∏—á–Ω–æ"
        elif report_data.success_rate >= 80:
            status_emoji = "üü°"
            status_text = "–•–æ—Ä–æ—à–æ"
        else:
            status_emoji = "üî¥"
            status_text = "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        
        # –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if report_data.last_activity:
            time_since_activity = (datetime.now(self.timezone) - report_data.last_activity).total_seconds()
            if time_since_activity < 3600:  # –ú–µ–Ω–µ–µ —á–∞—Å–∞
                activity_text = f"{time_since_activity/60:.0f} –º–∏–Ω –Ω–∞–∑–∞–¥"
            elif time_since_activity < 86400:  # –ú–µ–Ω–µ–µ —Å—É—Ç–æ–∫
                activity_text = f"{time_since_activity/3600:.0f} —á –Ω–∞–∑–∞–¥"
            else:
                activity_text = f"{time_since_activity/86400:.0f} –¥–Ω –Ω–∞–∑–∞–¥"
        else:
            activity_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –¢–æ–ø –æ—à–∏–±–æ–∫
        errors_text = ""
        if report_data.errors_summary:
            top_errors = sorted(report_data.errors_summary.items(), key=lambda x: x[1], reverse=True)[:3]
            errors_text = "\nüö® –¢–æ–ø –æ—à–∏–±–æ–∫:\n"
            for error_type, count in top_errors:
                errors_text += f"   ‚Ä¢ {error_type}: {count}\n"
        
        # –¢–æ–ø —á–∞—Ç–æ–≤
        chats_text = ""
        if report_data.top_chats:
            chats_text = "\nüìä –¢–æ–ø —á–∞—Ç–æ–≤:\n"
            for i, chat in enumerate(report_data.top_chats[:3], 1):
                chats_text += f"   {i}. {chat['chat_id']}: {chat['total_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
        message = f"""
üìà <b>–û–¢–ß–ï–¢ SendMessageBot</b> {status_emoji}

‚è∞ <b>–í—Ä–µ–º—è:</b> {timestamp.strftime('%d.%m.%Y %H:%M')}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

üì§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b>
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {report_data.total_sent}
   ‚Ä¢ –û—à–∏–±–æ–∫: {report_data.total_failed}
   ‚Ä¢ FloodWait: {report_data.total_flood_waits}
   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report_data.success_rate:.1f}%
   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {report_data.avg_response_time:.2f}—Å

üîÑ <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
   ‚Ä¢ –¶–∏–∫–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {report_data.cycles_completed}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö broadcaster'–æ–≤: {report_data.active_broadcasters}
   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_text}
{errors_text}{chats_text}
üí° <i>–°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ {self.report_interval_hours} —á–∞—Å–∞</i>
"""
        return message.strip()
    
    def _collect_report_data(self, broadcasters: List[Any]) -> ReportData:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        total_sent = sum(b.stats.total_sent for b in broadcasters)
        total_failed = sum(b.stats.total_failed for b in broadcasters)
        total_flood_waits = sum(b.stats.flood_waits for b in broadcasters)
        
        # –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        total_attempts = total_sent + total_failed
        success_rate = (total_sent / total_attempts * 100) if total_attempts > 0 else 0
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        all_response_times = []
        for b in broadcasters:
            if hasattr(b, 'metrics') and b.metrics.message_metrics:
                times = [m.response_time for m in b.metrics.message_metrics if m.response_time > 0]
                all_response_times.extend(times)
        
        avg_response_time = sum(all_response_times) / len(all_response_times) if all_response_times else 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
        cycles_completed = sum(b.metrics.stats.get('total_cycles_completed', 0) for b in broadcasters if hasattr(b, 'metrics'))
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        last_activities = [b.stats.last_sent_time for b in broadcasters if b.stats.last_sent_time]
        last_activity = max(last_activities) if last_activities else None
        
        # –°–≤–æ–¥–∫–∞ –æ—à–∏–±–æ–∫
        errors_summary = {}
        for b in broadcasters:
            if hasattr(b, 'metrics'):
                for chat_id, chat_stats in b.metrics.chat_stats.items():
                    for error_type, count in chat_stats['error_types'].items():
                        errors_summary[error_type] = errors_summary.get(error_type, 0) + count
        
        # –¢–æ–ø —á–∞—Ç–æ–≤
        top_chats = []
        for b in broadcasters:
            if hasattr(b, 'metrics'):
                top_chats.extend(b.metrics._get_top_chats(5))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        top_chats = sorted(top_chats, key=lambda x: x['total_messages'], reverse=True)[:5]
        
        return ReportData(
            timestamp=datetime.now(self.timezone),
            total_sent=total_sent,
            total_failed=total_failed,
            total_flood_waits=total_flood_waits,
            success_rate=success_rate,
            avg_response_time=avg_response_time,
            cycles_completed=cycles_completed,
            active_broadcasters=len([b for b in broadcasters if b._running]),
            last_activity=last_activity,
            errors_summary=errors_summary,
            top_chats=top_chats
        )
    
    async def send_report(self, broadcasters: List[Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        try:
            self.logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            report_data = self._collect_report_data(broadcasters)
            self.last_report_data = report_data
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_report_message(report_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            success = await self._send_telegram_message(message)
            
            if success:
                self.last_report_time = datetime.now(self.timezone)
                self.reports_sent += 1
                self.logger.info(f"–û—Ç—á–µ—Ç #{self.reports_sent} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            return success
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    def should_send_report(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç"""
        if self.last_report_time is None:
            return True
        
        time_since_last = datetime.now(self.timezone) - self.last_report_time
        return time_since_last.total_seconds() >= (self.report_interval_hours * 3600)
    
    async def _report_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
        self.logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.report_interval_hours} —á–∞—Å–æ–≤)")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç
                if self.should_send_report():
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ broadcaster'–æ–≤
                    broadcasters = self.get_broadcasters_func() if self.get_broadcasters_func else []
                    if broadcasters:
                        await self.send_report(broadcasters)
                    else:
                        self.logger.warning("–ù–µ—Ç broadcaster'–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
                
                # –ñ–¥–µ–º 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(3600)
                
            except asyncio.CancelledError:
                self.logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç—á–µ—Ç–æ–≤: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def start(self, get_broadcasters_func):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
        
        Args:
            get_broadcasters_func: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ broadcaster'–æ–≤
        """
        if self.running:
            self.logger.warning("–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        if not self.bot_token or not self.channel_id:
            self.logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã bot_token –∏–ª–∏ channel_id –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤")
            return
        
        self.get_broadcasters_func = get_broadcasters_func
        self.running = True
        self.task = asyncio.create_task(self._report_loop())
        self.logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤"""
        if not self.running:
            return
        
        self.running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        self.logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def force_send_report(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        if self.running and self.get_broadcasters_func:
            self.logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            broadcasters = self.get_broadcasters_func()
            asyncio.create_task(self.send_report(broadcasters))
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤"""
        next_report_time = None
        if self.last_report_time:
            next_report_time = self.last_report_time + timedelta(hours=self.report_interval_hours)
        
        return {
            'running': self.running,
            'reports_sent': self.reports_sent,
            'last_report_time': self.last_report_time.isoformat() if self.last_report_time else None,
            'next_report_time': next_report_time.isoformat() if next_report_time else None,
            'report_interval_hours': self.report_interval_hours,
            'channel_id': self.channel_id
        }
