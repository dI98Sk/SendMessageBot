#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—á–µ—Ç–æ–≤
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(str(Path(__file__).parent))

from config.settings import config_manager
from monitoring.reports import TelegramReporter
from core.broadcaster import EnhancedBroadcaster
from utils.logger import get_logger

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
config = config_manager.load_config()
logger = get_logger(__name__, config.logging)

async def test_telegram_reports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = config_manager.load_config()
        
        if not config.reports.enable_reports:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        if not config.reports.telegram_bot_token or not config.reports.telegram_channel_id:
            print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã REPORTS_BOT_TOKEN –∏–ª–∏ REPORTS_CHANNEL_ID")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç–µ—Ä
        reporter = TelegramReporter(
            bot_token=config.reports.telegram_bot_token,
            channel_id=config.reports.telegram_channel_id,
            timezone=config.reports.timezone
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ broadcaster'—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        test_broadcasters = []
        
        # –¢–µ—Å—Ç–æ–≤—ã–π B2B broadcaster
        b2b_broadcaster = EnhancedBroadcaster(
            api_id=config.telegram.api_id,
            api_hash=config.telegram.api_hash,
            phone=config.telegram.phone,
            session_name="test_b2b_reports",
            messages=config.b2b_messages[:2],  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 2 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
            targets=config.test_targets,
            delay_between_messages=30,
            delay_between_cycles=60,
            max_retries=2,
            use_proxy=config.telegram.use_proxy,
            proxy_config=config.telegram.proxy_config
        )
        test_broadcasters.append(b2b_broadcaster)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π B2C broadcaster
        b2c_broadcaster = EnhancedBroadcaster(
            api_id=config.telegram.api_id,
            api_hash=config.telegram.api_hash,
            phone=config.telegram.phone,
            session_name="test_b2c_reports",
            messages=config.b2c_messages[:1],  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            targets=config.test_targets,
            delay_between_messages=30,
            delay_between_cycles=60,
            max_retries=2,
            use_proxy=config.telegram.use_proxy,
            proxy_config=config.telegram.proxy_config
        )
        test_broadcasters.append(b2c_broadcaster)
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        success = await reporter.send_report(test_broadcasters)
        
        if success:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ö–∞–Ω–∞–ª: {config.reports.telegram_channel_id}")
            print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç—á–µ—Ç–æ–≤: {config.reports.report_interval_hours} —á–∞—Å–æ–≤")
            print(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {config.reports.timezone}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def send_manual_report():
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
    print("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    
    try:
        config = config_manager.load_config()
        
        if not config.reports.enable_reports:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä
        reporter = TelegramReporter(
            bot_token=config.reports.telegram_bot_token,
            channel_id=config.reports.telegram_channel_id,
            timezone=config.reports.timezone
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ broadcaster'–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ broadcaster'—ã
        empty_broadcasters = []
        
        success = await reporter.send_report(empty_broadcasters)
        
        if success:
            print("‚úÖ –†—É—á–Ω–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä—É—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä—É—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def show_reports_config():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤"""
    print("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤:")
    print("=" * 50)
    
    try:
        config = config_manager.load_config()
        
        print(f"üìä –í–∫–ª—é—á–µ–Ω–∞: {'‚úÖ' if config.reports.enable_reports else '‚ùå'}")
        print(f"ü§ñ Bot Token: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.reports.telegram_bot_token else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"üì∫ Channel ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.reports.telegram_channel_id else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {config.reports.report_interval_hours} —á–∞—Å–æ–≤")
        print(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {config.reports.timezone}")
        
        if config.reports.enable_reports and config.reports.telegram_bot_token and config.reports.telegram_channel_id:
            print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            print("\n–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            print("- ENABLE_REPORTS=true")
            print("- REPORTS_BOT_TOKEN=your_bot_token")
            print("- REPORTS_CHANNEL_ID=@your_channel")
            print("- REPORT_INTERVAL_HOURS=12")
            print("- REPORTS_TIMEZONE=Europe/Moscow")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    while True:
        print("\n" + "=" * 60)
        print("üìà –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô –û–¢–ß–ï–¢–û–í")
        print("=" * 60)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤")
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞")
        print("3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–π –æ—Ç—á–µ—Ç")
        print("4. –í—ã—Ö–æ–¥")
        print("=" * 60)
        
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
            
            if choice == "1":
                show_reports_config()
            elif choice == "2":
                await test_telegram_reports()
            elif choice == "3":
                await send_manual_report()
            elif choice == "4":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥...")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
