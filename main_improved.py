"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import asyncio
import signal
import sys
from pathlib import Path
from typing import List
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import config_manager, AppConfig
from utils.logger import get_logger
from core.broadcaster import EnhancedBroadcaster
from utils.google_sheets import GoogleSheetsManager, MessageUpdater
from config.message_updater import MessageConfigUpdater
from monitoring.reports import TelegramReporter
from core.queue import queue_manager, Priority, QueueItem
from monitoring.metrics import MetricsCollector, HealthChecker
from monitoring.notifications import (
    notification_manager, alert_manager,
    TelegramNotificationChannel, WebhookNotificationChannel
)
from utils.security import security_manager

class SendMessageBotApp:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        self.config: AppConfig = None
        self.logger = None
        self.broadcasters: List[EnhancedBroadcaster] = []
        self.metrics_collector = MetricsCollector()
        self.health_checker = HealthChecker(self.metrics_collector)
        self.running = False
        self.tasks: List[asyncio.Task] = []

        # Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        self.google_sheets_manager = None
        self.message_updater = None
        self.config_updater = None

        # –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤
        self.telegram_reporter = None
        
        # –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_client = None



    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.config = config_manager.load_config()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
            self.logger = get_logger("main", self.config.logging)

            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SendMessageBot...")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self._validate_config()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self._setup_notifications()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–µ–π
            await self._setup_queues()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
            await self._setup_google_sheets()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
            await self._setup_reports()

            # –°–æ–∑–¥–∞–Ω–∏–µ broadcaster'–æ–≤ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã)
            if not self.broadcasters:
                await self._create_broadcasters()
            else:
                self.logger.info(f"Broadcaster'—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã: {len(self.broadcasters)} —à—Ç.")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            self._setup_signal_handlers()

            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            if self.logger:
                self.logger.exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            else:
                print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    async def _validate_config(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self.config.telegram.api_id or not self.config.telegram.api_hash:
            raise ValueError("API_ID –∏ API_HASH –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π
        session_file = Path(f"{self.config.telegram.session_name}.session")
        if not session_file.exists():
            self.logger.warning(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Sheets –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if self.config.google_sheets.b2b_sheet_url or self.config.google_sheets.b2c_sheet_url:
            creds_file = Path(self.config.google_sheets.credentials_file)
            if not creds_file.exists():
                self.logger.warning(f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {creds_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    async def _setup_notifications(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if self.config.notifications.enable_telegram_notifications:
            admin_id = self.config.notifications.admin_telegram_id
            
            if admin_id:
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π Telegram –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    from telethon import TelegramClient
                    
                    self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
                    
                    notification_client = TelegramClient(
                        f"notification_session",
                        self.config.telegram.api_id,
                        self.config.telegram.api_hash
                    )
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                    await notification_client.start(phone=self.config.telegram.phone)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    telegram_channel = TelegramNotificationChannel(
                        client=notification_client,
                        admin_chat_id=admin_id
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
                    notification_manager.add_channel(telegram_channel)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                    self.notification_client = notification_client
                    
                    self.logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è admin: {admin_id}")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                    self.logger.warning("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            else:
                self.logger.warning("‚ö†Ô∏è ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                self.logger.info("–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_TELEGRAM_ID")
        else:
            self.logger.info("üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        # Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if self.config.notifications.enable_webhook_notifications:
            webhook_url = self.config.notifications.webhook_url
            if webhook_url and webhook_url != "https://your-webhook-url.com":
                try:
                    webhook_channel = WebhookNotificationChannel(webhook_url)
                    notification_manager.add_channel(webhook_channel)
                    self.logger.info(f"‚úÖ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {webhook_url}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            else:
                self.logger.info("üì° Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω WEBHOOK_URL")
        else:
            self.logger.info("üì° Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        try:
            alert_manager.add_default_rules()
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if notification_manager.channels:
            self.logger.info(f"üì¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞: {len(notification_manager.channels)} –∫–∞–Ω–∞–ª–æ–≤")
        else:
            self.logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ - –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

    async def _setup_queues(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π"""
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        queue_manager.create_queue("b2b_messages", max_size=5000)
        queue_manager.create_queue("b2c_messages", max_size=5000)
        queue_manager.create_queue("priority_messages", max_size=1000)

    async def _create_broadcasters(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ broadcaster'–æ–≤"""
        before_count = len(self.broadcasters)
        print(f"üì± –°–æ–∑–¥–∞–Ω–∏–µ broadcaster'–æ–≤... (—Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {before_count})")
        
        if self.logger:
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ broadcaster'–æ–≤... (—Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {before_count})")

        # B2B Broadcaster - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç acc1 (ID: 8108419249)
        b2b_broadcaster = EnhancedBroadcaster(
            config=self.config,
            name="B2B_Broadcaster",
            targets=self.config.test_targets,  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: TARGETS
            messages=self.config.b2b_messages,
            session_name="sessions/acc1"  # –ü–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è B2B
        )
        self.broadcasters.append(b2b_broadcaster)
        print(f"‚úÖ B2B Broadcaster —Å–æ–∑–¥–∞–Ω (acc1): {len(self.config.test_targets)} —á–∞—Ç–æ–≤, {len(self.config.b2b_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        # B2C Broadcaster - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç acc2 (ID: 8497033180)
        b2c_broadcaster = EnhancedBroadcaster(
            config=self.config,
            name="B2C_Broadcaster",
            targets=self.config.test_targets,
            messages=self.config.b2c_messages,
            session_name="sessions/acc2"  # –í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è B2C
        )
        self.broadcasters.append(b2c_broadcaster)
        print(f"‚úÖ B2C Broadcaster —Å–æ–∑–¥–∞–Ω (acc2): {len(self.config.test_targets)} —á–∞—Ç–æ–≤, {len(self.config.b2c_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        after_count = len(self.broadcasters)
        print(f"üìä –í—Å–µ–≥–æ broadcaster'–æ–≤: {after_count}")
        
        if self.logger:
            self.logger.info(f"–í—Å–µ–≥–æ broadcaster'–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: {after_count}")

    async def _setup_google_sheets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            self.google_sheets_manager = GoogleSheetsManager(
                credentials_file=self.config.google_sheets.credentials_file
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
            self.config_updater = MessageConfigUpdater()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageUpdater
            self.message_updater = MessageUpdater(self.google_sheets_manager)

            # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.message_updater.add_update_callback(self._on_messages_updated)

            self.logger.info("Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (self.config.google_sheets.b2b_sheet_url or self.config.google_sheets.b2c_sheet_url):
                try:
                    self.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Google Sheets...")
                    await self._initial_message_update()
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets: {e}")
                    self.logger.info("‚ÑπÔ∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–∑ config/messages.py")
                    self.logger.info("‚ÑπÔ∏è  –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å Google Sheets –ø–æ–∑–∂–µ")

        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets: {e}")
            self.logger.info("‚ÑπÔ∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Google Sheets")

    async def _initial_message_update(self):
        """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self.logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

            success = await self.message_updater.update_messages_from_sheets(
                self.config.google_sheets.b2b_sheet_url,
                self.config.google_sheets.b2c_sheet_url
            )

            if success:
                self.logger.info("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                self.config = config_manager.load_config()
                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º broadcaster'—ã —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await self._recreate_broadcasters()
            else:
                self.logger.warning("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    async def _on_messages_updated(self, new_messages):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Google Sheets")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.config_updater.update_messages_file(
                new_messages['b2b'],
                new_messages['b2c']
            )

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
            self.config_updater.reload_messages_module()

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config = config_manager.load_config()

            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º broadcaster'—ã —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await self._recreate_broadcasters()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await notification_manager.send_info(
                "–°–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                f"–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: B2B={len(new_messages['b2b'])}, B2C={len(new_messages['b2c'])}"
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def _recreate_broadcasters(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ broadcaster'–æ–≤ —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        try:
            old_count = len(self.broadcasters)
            self.logger.info(f"–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ broadcaster'–æ–≤: –±—ã–ª–æ {old_count} —à—Ç.")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ broadcaster'—ã
            for broadcaster in self.broadcasters:
                self.logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ broadcaster: {broadcaster.name}")
                await broadcaster.stop()

            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            self.broadcasters.clear()
            self.logger.info("–°–ø–∏—Å–æ–∫ broadcaster'–æ–≤ –æ—á–∏—â–µ–Ω")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ broadcaster'—ã
            await self._create_broadcasters()

            self.logger.info(f"Broadcaster'—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã: —Ç–µ–ø–µ—Ä—å {len(self.broadcasters)} —à—Ç.")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è broadcaster'–æ–≤: {e}")

    async def _setup_reports(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            if not self.config.reports.enable_reports:
                self.logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                return

            if not self.config.reports.telegram_bot_token or not self.config.reports.telegram_channel_id:
                self.logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã REPORTS_BOT_TOKEN –∏–ª–∏ REPORTS_CHANNEL_ID")
                return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
            self.telegram_reporter = TelegramReporter(
                bot_token=self.config.reports.telegram_bot_token,
                channel_id=self.config.reports.telegram_channel_id,
                timezone=self.config.reports.timezone
            )

            self.logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤: {e}")

    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            asyncio.create_task(self.shutdown())

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    async def _health_check_task(self):
        """–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        while self.running:
            try:
                # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
                health_status = self.health_checker.check_health()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
                stats = self.metrics_collector.get_summary_stats()
                await alert_manager.check_alerts(stats['general'])

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
                if health_status['status'] != 'healthy':
                    await notification_manager.send_warning(
                        "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π",
                        f"–°—Ç–∞—Ç—É—Å: {health_status['status']}",
                        rate_limit_key="health_check",
                        rate_limit_seconds=1800  # 30 –º–∏–Ω—É—Ç
                    )

                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

            except Exception as e:
                self.logger.exception(f"–û—à–∏–±–∫–∞ –≤ health check: {e}")
                await asyncio.sleep(60)

    async def _metrics_collection_task(self):
        """–ó–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        while self.running:
            try:
                # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç broadcaster'–æ–≤
                for broadcaster in self.broadcasters:
                    stats = broadcaster.get_stats()
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ collector

                await asyncio.sleep(60)  # –°–±–æ—Ä –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except Exception as e:
                self.logger.exception(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
                await asyncio.sleep(60)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.running:
            self.logger.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return

        self.running = True
        self.logger.info("–ó–∞–ø—É—Å–∫ SendMessageBot...")
        self.logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ broadcaster'–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {len(self.broadcasters)}")

        try:
            # –ó–∞–ø—É—Å–∫ broadcaster'–æ–≤
            broadcaster_tasks = []
            for idx, broadcaster in enumerate(self.broadcasters, 1):
                self.logger.info(f"–ó–∞–ø—É—Å–∫ broadcaster {idx}/{len(self.broadcasters)}: {broadcaster.name}")
                task = asyncio.create_task(broadcaster.start())
                broadcaster_tasks.append(task)
                self.tasks.append(task)

            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            health_task = asyncio.create_task(self._health_check_task())
            metrics_task = asyncio.create_task(self._metrics_collection_task())

            self.tasks.extend([health_task, metrics_task])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
            await notification_manager.send_info(
                "SendMessageBot –∑–∞–ø—É—â–µ–Ω",
                "–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞"
            )

            self.logger.info("SendMessageBot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("üöÄ SendMessageBot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ó–∞–ø—É—â–µ–Ω–æ broadcaster'–æ–≤: {len(self.broadcasters)}")
            print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã: {len(self.config.test_targets)}")
            print("üí¨ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")

            print("\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
            print("   python watch_stats.py")
            print("   –∏–ª–∏ python show_stats.py")

            print("\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
            print("   python watch_stats.py")
            print("   –∏–ª–∏ python show_stats.py")

            # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_task = asyncio.create_task(self._stats_display_task())
            self.tasks.append(stats_task)


            # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            if self.message_updater and (
                    self.config.google_sheets.b2b_sheet_url or self.config.google_sheets.b2c_sheet_url):
                update_task = asyncio.create_task(
                    self.message_updater.start_periodic_updates(
                        self.config.google_sheets.b2b_sheet_url,
                        self.config.google_sheets.b2c_sheet_url,
                        self.config.google_sheets.update_interval // 3600  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ —á–∞—Å—ã
                    )
                )
                self.tasks.append(update_task)
                print("üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Google Sheets –≤–∫–ª—é—á–µ–Ω–æ")

            # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
            if self.telegram_reporter:
                report_task = asyncio.create_task(
                    self.telegram_reporter.start(self.broadcasters)
                )
                self.tasks.append(report_task)
                self.logger.info(
                    f"–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.config.reports.report_interval_hours} —á–∞—Å–æ–≤)")
                print(
                    f"üìà –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ (–æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–µ {self.config.reports.report_interval_hours} —á–∞—Å–æ–≤)")

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*self.tasks, return_exceptions=True)

        except Exception as e:
            self.logger.exception(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await notification_manager.send_critical(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}"
            )
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.running:
            return

        self.logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã SendMessageBot...")
        self.running = False

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ broadcaster'–æ–≤
        for broadcaster in self.broadcasters:
            await broadcaster.stop()

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
        if self.telegram_reporter:
            await self.telegram_reporter.stop()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if self.notification_client:
            try:
                await self.notification_client.disconnect()
                self.logger.info("Telegram –∫–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for task in self.tasks:
            if not task.done():
                task.cancel()

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        await asyncio.gather(*self.tasks, return_exceptions=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await notification_manager.send_info(
            "SendMessageBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        )

        self.logger.info("SendMessageBot –∑–∞–≤–µ—Ä—à–µ–Ω")

    async def _stats_display_task(self):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            while self.running:
                await asyncio.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

                if not self.running:
                    break

                print(f"\n{'=' * 60}")
                print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê ({datetime.now().strftime('%H:%M:%S')})")
                print(f"{'=' * 60}")

                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_sent = sum(b.stats.total_sent for b in self.broadcasters)
                total_failed = sum(b.stats.total_failed for b in self.broadcasters)
                total_flood_waits = sum(b.stats.flood_waits for b in self.broadcasters)

                print(f"üéØ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(self.config.test_targets)}")
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}")
                print(f"‚ùå –û—à–∏–±–æ–∫: {total_failed}")
                print(f"‚è≥ FloodWait: {total_flood_waits}")

                if total_sent + total_failed > 0:
                    success_rate = (total_sent / (total_sent + total_failed)) * 100
                    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É broadcaster'—É
                for broadcaster in self.broadcasters:
                    broadcaster.print_stats()

                print(f"{'=' * 60}")

        except asyncio.CancelledError:
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = SendMessageBotApp()
    
    try:
        await app.initialize()
        await app.start()
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        await app.shutdown()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    def exception_handler(loop, context):
        print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {context}")
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.set_exception_handler(exception_handler)
    
    try:
        loop.run_until_complete(main())
    finally:
        loop.close()
