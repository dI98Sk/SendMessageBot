#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""
import asyncio
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import config_manager
from config.targets import TEST_TARGETS, TARGETS
from config.messages import MESSAGES_B2B, MESSAGES_B2C
from utils.logger import get_logger
from core.broadcaster import EnhancedBroadcaster
from monitoring.metrics import MetricsCollector, HealthChecker

def print_system_overview():
    """–û–±—â–∏–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    print("üéØ SendMessageBot - –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    config = config_manager.load_config()
    
    print(f"üì± API ID: {config.telegram.api_id}")
    print(f"üìÅ –°–µ—Å—Å–∏—è: {config.telegram.session_name}")
    print(f"üéØ –û—Å–Ω–æ–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(TARGETS)}")
    print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤: {len(TEST_TARGETS)}")
    print(f"üí¨ B2B —Å–æ–æ–±—â–µ–Ω–∏–π: {len(MESSAGES_B2B)}")
    print(f"üí¨ B2C —Å–æ–æ–±—â–µ–Ω–∏–π: {len(MESSAGES_B2C)}")
    
    print(f"\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:")
    print(f"   - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏: {config.broadcasting.delay_between_chats}—Å")
    print(f"   - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: {config.broadcasting.delay_between_cycles}—Å")
    print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã: {config.broadcasting.max_retries}")
    print(f"   - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'–í–∫–ª—é—á–µ–Ω' if config.broadcasting.enable_scheduling else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    
    if config.broadcasting.enable_scheduling:
        print(f"   - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {config.broadcasting.start_time_hour}:00")
        print(f"   - –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {config.broadcasting.end_time_hour}:00")
    
    print("=" * 60)

def print_targets_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–∞—Ö"""
    print("\nüéØ –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã:")
    print("-" * 30)
    
    print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã ({len(TEST_TARGETS)}):")
    for i, chat_id in enumerate(TEST_TARGETS, 1):
        print(f"   {i}. {chat_id}")
    
    print(f"\nüì± –û—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Ç—ã (–ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(TARGETS)}):")
    for i, chat_id in enumerate(TARGETS[:10], 1):
        print(f"   {i}. {chat_id}")
    
    if len(TARGETS) > 10:
        print(f"   ... –∏ –µ—â–µ {len(TARGETS) - 10} —á–∞—Ç–æ–≤")

def print_messages_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    print("\nüí¨ –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    print("-" * 30)
    
    print(f"üìä B2B —Å–æ–æ–±—â–µ–Ω–∏—è ({len(MESSAGES_B2B)}):")
    for i, msg in enumerate(MESSAGES_B2B[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        preview = msg[:100] + "..." if len(msg) > 100 else msg
        print(f"   {i}. {preview}")
    
    if len(MESSAGES_B2B) > 3:
        print(f"   ... –∏ –µ—â–µ {len(MESSAGES_B2B) - 3} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    print(f"\nüìä B2C —Å–æ–æ–±—â–µ–Ω–∏—è ({len(MESSAGES_B2C)}):")
    for i, msg in enumerate(MESSAGES_B2C[:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
        preview = msg[:100] + "..." if len(msg) > 100 else msg
        print(f"   {i}. {preview}")
    
    if len(MESSAGES_B2C) > 2:
        print(f"   ... –∏ –µ—â–µ {len(MESSAGES_B2C) - 2} —Å–æ–æ–±—â–µ–Ω–∏–π")

async def simulate_broadcaster_stats():
    """–°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ broadcaster'–æ–≤"""
    print("\nüìä –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏):")
    print("-" * 50)
    
    config = config_manager.load_config()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ broadcaster'—ã
    b2b_broadcaster = EnhancedBroadcaster(
        config=config,
        name="B2B_Test",
        targets=TEST_TARGETS,
        messages=MESSAGES_B2B[:2]
    )
    
    b2c_broadcaster = EnhancedBroadcaster(
        config=config,
        name="B2C_Test",
        targets=TEST_TARGETS,
        messages=MESSAGES_B2C[:1]
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    b2b_broadcaster.print_stats()
    b2c_broadcaster.print_stats()

def print_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π MetricsCollector
    metrics = MetricsCollector()
    health_checker = HealthChecker(metrics)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    from monitoring.metrics import MessageMetric
    from datetime import datetime
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    test_metric = MessageMetric(
        timestamp=datetime.now(),
        chat_id=-1002679672234,
        message_id=1,
        success=True,
        response_time=1.5
    )
    metrics.record_message(test_metric)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
    health = health_checker.check_health()
    
    status_emoji = {
        'healthy': '‚úÖ',
        'warning': '‚ö†Ô∏è',
        'error': '‚ùå'
    }
    
    print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_emoji.get(health['status'], '‚ùì')} {health['status'].upper()}")
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {health['timestamp']}")
    
    for check_name, check_result in health['checks'].items():
        emoji = status_emoji.get(check_result['status'], '‚ùì')
        print(f"  {emoji} {check_name}: {check_result['message']}")

def print_usage_examples():
    """–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\nüí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("-" * 30)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:")
    print("   python main_simple.py          # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("   python main_improved.py        # –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    
    print("\nüìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    print("   python show_stats.py           # –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç")
    print("   python switch_targets.py       # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤")
    
    print("\nüîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    print("   Ctrl+C                         # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    print("   python migrate_project.py      # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_system_overview()
    print_targets_info()
    print_messages_info()
    await simulate_broadcaster_stats()
    print_health_check()
    print_usage_examples()
    
    print(f"\nüïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == "__main__":
    asyncio.run(main())
