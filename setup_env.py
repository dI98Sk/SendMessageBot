#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env —Ñ–∞–π–ª–∞
"""
import os
import getpass
from pathlib import Path

def get_input(prompt, default=None, sensitive=False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if default:
        prompt = f"{prompt} [{default}]: "
    else:
        prompt = f"{prompt}: "
    
    if sensitive:
        value = getpass.getpass(prompt)
    else:
        value = input(prompt).strip()
    
    return value if value else default

def setup_telegram_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram API"""
    print("\n" + "="*50)
    print("üì± –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM API")
    print("="*50)
    print("–ü–æ–ª—É—á–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ https://my.telegram.org")
    
    api_id = get_input("API ID (—á–∏—Å–ª–æ)")
    api_hash = get_input("API Hash", sensitive=True)
    session_name = get_input("–ò–º—è —Å–µ—Å—Å–∏–∏", "sendmessagebot_session")
    
    return {
        "API_ID": api_id,
        "API_HASH": api_hash,
        "SESSION_NAME": session_name
    }

def setup_proxy_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    print("\n" + "="*50)
    print("üåê –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ö–°–ò (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)")
    print("="*50)
    
    use_proxy = get_input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏? (y/n)", "n").lower() == 'y'
    
    if not use_proxy:
        return {"PROXY_ENABLED": "false"}
    
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏:")
    proxy_type = get_input("–¢–∏–ø –ø—Ä–æ–∫—Å–∏ (mtproto/socks5/http)", "mtproto")
    proxy_addr = get_input("–ê–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏")
    proxy_port = get_input("–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏", "8888")
    proxy_secret = get_input("–°–µ–∫—Ä–µ—Ç –ø—Ä–æ–∫—Å–∏", sensitive=True) if proxy_type == "mtproto" else ""
    
    return {
        "PROXY_ENABLED": "true",
        "PROXY_PROTOCOL": proxy_type,
        "PROXY_ADDR": proxy_addr,
        "PROXY_PORT": proxy_port,
        "PROXY_SECRET": proxy_secret
    }

def setup_broadcasting_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    print("\n" + "="*50)
    print("üì¢ –ù–ê–°–¢–†–û–ô–ö–ê –†–ê–°–°–´–õ–ö–ò")
    print("="*50)
    
    delay_between_chats = get_input("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)", "5")
    cycle_delay = get_input("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)", "900")
    max_retries = get_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫", "3")
    retry_delay = get_input("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)", "60")
    start_time_hour = get_input("–ß–∞—Å –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (0-23)", "6")
    enable_scheduling = get_input("–í–∫–ª—é—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫? (true/false)", "true")
    
    return {
        "DELAY_BETWEEN_CHATS": delay_between_chats,
        "CYCLE_DELAY": cycle_delay,
        "MAX_RETRIES": max_retries,
        "RETRY_DELAY": retry_delay,
        "START_TIME_HOUR": start_time_hour,
        "ENABLE_SCHEDULING": enable_scheduling
    }

def setup_google_sheets_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets"""
    print("\n" + "="*50)
    print("üìä –ù–ê–°–¢–†–û–ô–ö–ê GOOGLE SHEETS")
    print("="*50)
    
    use_sheets = get_input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Sheets? (y/n)", "n").lower() == 'y'
    
    if not use_sheets:
        return {
            "GOOGLE_CREDENTIALS_FILE": "credentials.json",
            "SHEET_URL_B2B": "",
            "SHEET_URL_B2C": "",
            "GOOGLE_UPDATE_INTERVAL": "3600"
        }
    
    credentials_file = get_input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", "credentials.json")
    sheet_url_b2b = get_input("URL —Ç–∞–±–ª–∏—Ü—ã B2B —Å–æ–æ–±—â–µ–Ω–∏–π")
    sheet_url_b2c = get_input("URL —Ç–∞–±–ª–∏—Ü—ã B2C —Å–æ–æ–±—â–µ–Ω–∏–π")
    update_interval = get_input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)", "3600")
    
    return {
        "GOOGLE_CREDENTIALS_FILE": credentials_file,
        "SHEET_URL_B2B": sheet_url_b2b,
        "SHEET_URL_B2C": sheet_url_b2c,
        "GOOGLE_UPDATE_INTERVAL": update_interval
    }

def setup_logging_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*50)
    print("üìù –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    log_level = get_input("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG/INFO/WARNING/ERROR/CRITICAL)", "INFO")
    log_file = get_input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤", "logs/bot.log")
    log_max_size = get_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ (–±–∞–π—Ç—ã)", "10485760")
    log_backup_count = get_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", "5")
    log_console = get_input("–í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å? (true/false)", "false")
    
    return {
        "LOG_LEVEL": log_level,
        "LOG_FILE": log_file,
        "LOG_MAX_SIZE": log_max_size,
        "LOG_BACKUP_COUNT": log_backup_count,
        "LOG_CONSOLE": log_console
    }

def setup_security_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\n" + "="*50)
    print("üîí –ù–ê–°–¢–†–û–ô–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("="*50)
    
    master_password = get_input("–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", sensitive=True)
    
    return {
        "MASTER_PASSWORD": master_password
    }

def setup_monitoring_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\n" + "="*50)
    print("üìä –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("="*50)
    
    enable_notifications = get_input("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? (y/n)", "n").lower() == 'y'
    
    if not enable_notifications:
        return {
            "ENABLE_STATUS_NOTIFICATIONS": "false",
            "ADMIN_TELEGRAM_ID": "",
            "WEBHOOK_URL": ""
        }
    
    admin_telegram_id = get_input("Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    webhook_url = get_input("Webhook URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", "")
    
    return {
        "ENABLE_STATUS_NOTIFICATIONS": "true",
        "ADMIN_TELEGRAM_ID": admin_telegram_id,
        "WEBHOOK_URL": webhook_url
    }

def setup_performance_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n" + "="*50)
    print("‚ö° –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*50)
    
    max_connections = get_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", "10")
    operation_timeout = get_input("–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–π (—Å–µ–∫—É–Ω–¥—ã)", "30")
    thread_pool_size = get_input("–†–∞–∑–º–µ—Ä –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤", "5")
    
    return {
        "MAX_CONNECTIONS": max_connections,
        "OPERATION_TIMEOUT": operation_timeout,
        "THREAD_POOL_SIZE": thread_pool_size
    }

def create_env_file(config):
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞"""
    env_content = """# ==============================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø TELEGRAM API
# ==============================================
API_ID={API_ID}
API_HASH={API_HASH}
SESSION_NAME={SESSION_NAME}

# ==============================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–û–ö–°–ò (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)
# ==============================================
PROXY_ENABLED={PROXY_ENABLED}
PROXY_PROTOCOL={PROXY_PROTOCOL}
PROXY_ADDR={PROXY_ADDR}
PROXY_PORT={PROXY_PORT}
PROXY_SECRET={PROXY_SECRET}

# ==============================================
# –ù–ê–°–¢–†–û–ô–ö–ò –†–ê–°–°–´–õ–ö–ò
# ==============================================
DELAY_BETWEEN_CHATS={DELAY_BETWEEN_CHATS}
CYCLE_DELAY={CYCLE_DELAY}
MAX_RETRIES={MAX_RETRIES}
RETRY_DELAY={RETRY_DELAY}
START_TIME_HOUR={START_TIME_HOUR}
ENABLE_SCHEDULING={ENABLE_SCHEDULING}

# ==============================================
# GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
# ==============================================
GOOGLE_CREDENTIALS_FILE={GOOGLE_CREDENTIALS_FILE}
SHEET_URL_B2B={SHEET_URL_B2B}
SHEET_URL_B2C={SHEET_URL_B2C}
GOOGLE_UPDATE_INTERVAL={GOOGLE_UPDATE_INTERVAL}

# ==============================================
# –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ==============================================
LOG_LEVEL={LOG_LEVEL}
LOG_FILE={LOG_FILE}
LOG_MAX_SIZE={LOG_MAX_SIZE}
LOG_BACKUP_COUNT={LOG_BACKUP_COUNT}
LOG_CONSOLE={LOG_CONSOLE}

# ==============================================
# –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
# ==============================================
MASTER_PASSWORD={MASTER_PASSWORD}

# ==============================================
# –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
# ==============================================
ENABLE_STATUS_NOTIFICATIONS={ENABLE_STATUS_NOTIFICATIONS}
ADMIN_TELEGRAM_ID={ADMIN_TELEGRAM_ID}
WEBHOOK_URL={WEBHOOK_URL}

# ==============================================
# –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨
# ==============================================
MAX_CONNECTIONS={MAX_CONNECTIONS}
OPERATION_TIMEOUT={OPERATION_TIMEOUT}
THREAD_POOL_SIZE={THREAD_POOL_SIZE}
""".format(**config)
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print(f"\n‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SendMessageBot - –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    print("="*60)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å .env —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    print("—É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ SendMessageBot")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ .env —Ñ–∞–π–ª
    if Path('.env').exists():
        overwrite = get_input("\n.env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n)", "n")
        if overwrite.lower() != 'y':
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config = {}
        
        # Telegram API (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        config.update(setup_telegram_config())
        
        # –ü—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        config.update(setup_proxy_config())
        
        # –†–∞—Å—Å—ã–ª–∫–∞
        config.update(setup_broadcasting_config())
        
        # Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        config.update(setup_google_sheets_config())
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        config.update(setup_logging_config())
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        config.update(setup_security_config())
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        config.update(setup_monitoring_config())
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        config.update(setup_performance_config())
        
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        create_env_file(config)
        
        print("\n" + "="*60)
        print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements_improved.txt")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main_improved.py")
        print("="*60)
        
    except KeyboardInterrupt:
        print("\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: {e}")

if __name__ == "__main__":
    main()
