#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
"""
import os
import shutil
from pathlib import Path
from datetime import datetime

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [
        'logs',
        'data', 
        'backup',
        'sessions'
    ]
    
    for dir_name in directories:
        Path(dir_name).mkdir(exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")

def backup_old_files():
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    backup_dir = Path('backup') / datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    files_to_backup = [
        'broadcasterB2B.py',
        'main.py', 
        'config_mes–í2B.py',
        'config_mes–í2C.py',
        'config_targ.py',
        'update_configB2B.py',
        'update_configB2C.py'
    ]
    
    for file_name in files_to_backup:
        if Path(file_name).exists():
            shutil.copy2(file_name, backup_dir / file_name)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {file_name}")
    
    return backup_dir

def move_session_files():
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π"""
    sessions_dir = Path('sessions')
    
    session_files = [
        'acc1.session',
        'acc2.session'
    ]
    
    for session_file in session_files:
        if Path(session_file).exists():
            shutil.move(session_file, sessions_dir / session_file)
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    duplicate_sessions = [
        'session_account_1.session',
        'session_account_2.session', 
        'session_name.session'
    ]
    
    for duplicate in duplicate_sessions:
        if Path(duplicate).exists():
            os.remove(duplicate)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Å–µ—Å—Å–∏–∏: {duplicate}")

def move_data_files():
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    data_dir = Path('data')
    
    data_files = [
        ('allChatID.txt', 'allChatID_backup.txt'),
        ('dict.txt', 'dict_backup.txt')
    ]
    
    for old_name, new_name in data_files:
        if Path(old_name).exists():
            shutil.move(old_name, data_dir / new_name)
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {old_name} ‚Üí {new_name}")

def archive_old_logs():
    """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
    if Path('bot.log').exists():
        logs_dir = Path('logs')
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        shutil.move('bot.log', logs_dir / f'bot_old_{timestamp}.log')
        print(f"‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: bot.log")

def remove_old_files():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    files_to_remove = [
        'broadcasterB2B.py',
        'main.py',
        'config_mes–í2B.py', 
        'config_mes–í2C.py',
        'config_targ.py',
        'update_configB2B.py',
        'update_configB2C.py'
    ]
    
    for file_name in files_to_remove:
        if Path(file_name).exists():
            os.remove(file_name)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_name}")

def update_gitignore():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .gitignore"""
    gitignore_content = """
# –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã (—É–¥–∞–ª–µ–Ω—ã –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏)
broadcasterB2B.py
main.py
config_mes–í2B.py
config_mes–í2C.py
config_targ.py
update_configB2B.py
update_configB2C.py

# –°–µ—Å—Å–∏–∏ Telegram
sessions/
*.session

# –õ–æ–≥–∏
logs/
*.log

# –î–∞–Ω–Ω—ã–µ
data/
allChatID.txt
dict.txt

# –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
backup/

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
.env
.env.local

# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.venv/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
"""
    
    with open('.gitignore', 'w', encoding='utf-8') as f:
        f.write(gitignore_content.strip())
    
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω .gitignore")

def create_migration_report():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    report = f"""
# –û—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏ SendMessageBot

**–î–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:

### ‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
- logs/ - –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
- data/ - –¥–ª—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö  
- backup/ - –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
- sessions/ - –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π Telegram

### ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω—ã —Ñ–∞–π–ª—ã:
- –°–µ—Å—Å–∏–∏ Telegram ‚Üí sessions/
- –î–∞–Ω–Ω—ã–µ ‚Üí data/ (—Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º)
- –õ–æ–≥–∏ ‚Üí logs/ (—Å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º)

### ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã:
- broadcasterB2B.py ‚Üí –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ core/broadcaster.py
- main.py ‚Üí –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ main_improved.py
- config_mes–í2B.py ‚Üí –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ config/settings.py
- config_mes–í2C.py ‚Üí –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ config/settings.py
- config_targ.py ‚Üí –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ config/settings.py
- update_configB2B.py ‚Üí –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
- update_configB2C.py ‚Üí –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É

### ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω .gitignore

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é: python main_improved.py
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã

## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):

–í—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backup/
–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–∏.
"""
    
    with open('MIGRATION_REPORT.md', 'w', encoding='utf-8') as f:
        f.write(report)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏: MIGRATION_REPORT.md")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é SendMessageBot –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É...")
    print("=" * 60)
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        create_directories()
        
        # 2. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
        backup_dir = backup_old_files()
        print(f"–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {backup_dir}")
        
        # 3. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
        print("\nüì± –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π...")
        move_session_files()
        
        # 4. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
        move_data_files()
        
        # 5. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
        print("\nüìù –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤...")
        archive_old_logs()
        
        # 6. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
        print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        remove_old_files()
        
        # 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .gitignore
        print("\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .gitignore...")
        update_gitignore()
        
        # 8. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
        create_migration_report()
        
        print("\n" + "=" * 60)
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main_improved.py")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ")

if __name__ == "__main__":
    main()
