#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import config_manager, AppConfig
from config.targets import TEST_TARGETS
from config.messages import MESSAGES_B2B, MESSAGES_B2C
from utils.logger import get_logger
from core.broadcaster import EnhancedBroadcaster

async def test_new_broadcaster():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ broadcaster"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã SendMessageBot")
    print("=" * 50)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = config_manager.load_config()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: API_ID={config.telegram.api_id}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        logger = get_logger("test", config.logging)
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ broadcaster –¥–ª—è B2B
        print("\nüì± –°–æ–∑–¥–∞–Ω–∏–µ B2B Broadcaster...")
        b2b_broadcaster = EnhancedBroadcaster(
            config=config,
            name="B2B_Test",
            targets=TEST_TARGETS,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã
            messages=MESSAGES_B2B[:2]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        )
        
        print(f"‚úÖ B2B Broadcaster —Å–æ–∑–¥–∞–Ω")
        print(f"   - –¶–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤: {len(TEST_TARGETS)}")
        print(f"   - –°–æ–æ–±—â–µ–Ω–∏–π: {len(MESSAGES_B2B[:2])}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        await b2b_broadcaster._ensure_connection()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = b2b_broadcaster.get_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –ò–º—è: {stats['name']}")
        print(f"   - –¶–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤: {stats['targets_count']}")
        print(f"   - –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_count']}")
        print(f"   - –°—Ç–∞—Ç—É—Å: {'–ó–∞–ø—É—â–µ–Ω' if stats['running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("python main_improved.py")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ broadcaster
        await b2b_broadcaster.stop()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_new_broadcaster())
